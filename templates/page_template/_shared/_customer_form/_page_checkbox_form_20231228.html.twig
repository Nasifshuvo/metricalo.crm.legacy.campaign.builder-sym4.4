<style type="text/css">

    .customer-form-error {
        display: block;
        width: 100%;
        margin-top: .25rem;
        font-size: .875em;
        color: #dc3545;
    }

    .custom-form {
        max-width: 41.6rem;
        width: 100%;
        background-color: var(--background-color);
        box-shadow: 0 .2rem 1.3rem rgba(0, 0, 0, 0.13);
        border-radius: 1.9rem;
        padding: 4.2rem 2rem;
    }

    .custom-form__heading {
        font-weight: 700;
        font-size: 2.8rem;
        line-height: 3.9rem;
        color: var(--text-color);
        text-align: center;
        margin: 0 0 3rem;
    }

    .custom-form__row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1.6rem;
    }

    .custom-form__row.checkbox {
        justify-content: flex-start;
        align-items: flex-start;
        margin-top: 3rem;
    }

    .custom-form__row.checkbox span {
        font-size: 1.3rem;
        display: block;
        color: var(--text-color);
        margin: -.3rem 0 0 1rem;
        word-break: break-word;
        text-align: justify;
    }

    .custom-form__item {
        position: relative;
        width: 100%;
        flex: 0 1 48%;
    }

    .custom-form__item.full-width {
        flex: 0 1 100%;
    }

    .custom-form__item__wrap {
        position: relative;
    }

    .custom-form__item__label {
        position: absolute;
        left: 1.5rem;
        top: 50%;
        transform: translate(0, -50%);
        z-index: 10;
        pointer-events: none;
        padding: 0 0.5rem;
        font-weight: 500;
        font-size: 1.5rem;
        line-height: 1.8rem;
        color: var(--text-color);
        transition: transform 150ms ease-out, font-size 150ms ease-out;
    }

    .focused .custom-form__item__label {
        transform: translateY(-150%);
        font-size: 1.3rem;
    }

    .custom-form__item__input {
        position: relative;
        padding: 1.2rem 0 .5rem 1.5rem;
        width: 100%;
        outline: 0;
        background-color: transparent;
        border: .1rem solid var(--border-color);
        box-shadow: 0 .2rem .2rem rgba(0, 0, 0, 0.05);
        border-radius: .8rem;
        color: var(--text-color);
        transition: box-shadow 150ms ease-out;

        font-weight: 500;
        font-size: 1.5rem;
        line-height: 1.8rem;
    }

    .custom-form__item__input option {
        color: #000000;
    }

    select.custom-form__item__input + .custom-form__item__label {
        transform: translateY(-155%);
        font-size: 1.3rem;
    }

    select.custom-form__item__input {
        padding: 1.2rem 0 0.5rem 1rem;
    }

    .custom-form .invalid-feedback {
        font-size: 1.1rem;
    }

    .custom-form__button {
        width: 100%;
        background-color: var(--button-background-color);
        color: var(--text-color);
        border: 0;
        border-radius: .8rem;
        padding: .8rem 1.6rem;
        font-weight: 700;
        font-size: 2rem;
        line-height: 2.4rem;
        text-transform: capitalize;
        cursor: pointer;
        margin-top: 2rem;
        transition: background-color .2s linear, color .2s linear;
    }

    .custom-form__button:hover {
        background-color: var(--text-color);
        color: var(--button-background-color);
    }

    @media (max-width: 1024px) {
        .custom-form__row {
            flex-direction: column;
            margin: 0;
        }

        .custom-form__row.checkbox {
            flex-direction: unset;
        }

        .custom-form__item {
            margin-bottom: 1.6rem;
        }
    }

    .privacy-policy-link,
    .privacy-policy-link:hover {
        color: white;
    }
</style>


<form class="needs-validation form-horizontal" id="customer_form"
      role="form" method="POST"
      action="{{ path('app.front.campaign.new', {'_locale': app.request.getLocale(), 'slug': campaign.slug }) }}"
      novalidate>
    {{ form_start(customerForm) }}

    <div class="custom-form__row">
        <div class="custom-form__item">

            <div class="custom-form__item__wrap">
                {{ form_widget(customerForm.first_name, { 'attr':
                    {
                        'class': 'custom-form__item__input',
                        'placeholder': " ",
                        'autocorrect': 'off',
                        'required': 'required',
                        'pattern': '.{2,}',
                        'autofocus': 'true'
                    }
                }) }}
                <label for="first_name"
                       class="custom-form__item__label">
                    {{ 'first_name'|trans({}, 'form_customer') }}
                </label>
            </div>

            <div class="custom-form__error">
                <div class="invalid-feedback">
                    {{ 'First name must be at least {{ limit }} characters long.'|trans({'{{ limit }}': 2}, 'validators') }}
                </div>
                <div class="customer-form-error">
                    {{ form_errors(customerForm.first_name) }}
                </div>
            </div>
        </div>
        <div class="custom-form__item">
            <div class="custom-form__item__wrap">
                {{ form_widget(customerForm.last_name, { 'attr':
                    {
                        'class': 'custom-form__item__input',
                        'placeholder': " ",
                        'autocorrect': 'off',
                        'required': 'required',
                        'pattern': '.{2,}'
                    }
                }) }}
                <label for="last_name"
                       class="custom-form__item__label">{{ 'last_name'|trans({}, 'form_customer') }}</label>
            </div>

            <div class="custom-form__error">
                <div class="invalid-feedback">
                    {{ 'Last name must be at least {{ limit }} characters long.'|trans({'{{ limit }}': 2}, 'validators') }}
                </div>
                <div class="customer-form-error">
                    {{ form_errors(customerForm.last_name) }}
                </div>
            </div>
        </div>
    </div>
    <div class="custom-form__row">
        <div class="custom-form__item full-width">
            <div class="custom-form__item__wrap">
                {{ form_widget(customerForm.address, { 'attr':
                    {
                        'class': 'custom-form__item__input',
                        'placeholder': " ",
                        'autocorrect': 'off',
                        'required': 'required'
                    }
                }) }}
                <label for="address" class="custom-form__item__label">{{ 'address'|trans({}, 'form_customer') }}</label>
            </div>

            <div class="custom-form__error">
                <div class="invalid-feedback">
                    {{ 'Address must at least {{ limit }} characters long.'|trans({'{{ limit }}': 5}, 'validators') }}
                </div>
                <div class="customer-form-error">
                    {{ form_errors(customerForm.address) }}
                </div>
            </div>
        </div>
    </div>
    <div class="custom-form__row">
        <div class="custom-form__item">
            <div class="custom-form__item__wrap">
                {{ form_widget(customerForm.postcode, { 'attr':
                    {
                        'class': 'custom-form__item__input',
                        'placeholder': " ",
                        'autocorrect': 'off',
                        'minlength': '1',
                        'maxlength': '30',
                        'required': 'required'
                    }
                }) }}
                <label for="postcode"
                       class="custom-form__item__label">{{ 'zipcode'|trans({}, 'form_customer') }}</label>
            </div>

            <div class="custom-form__error">
                <div class="invalid-feedback">
                    {{ 'Postcode must be at least {{ limit }} characters long.'|trans({'{{ limit }}': 3}, 'validators') }}
                </div>
                <div class="customer-form-error">
                    {{ form_errors(customerForm.postcode) }}
                </div>
            </div>
        </div>
        <div class="custom-form__item">
            <div class="custom-form__item__wrap">
                {{ form_widget(customerForm.city, { 'attr':
                    {
                        'class': 'custom-form__item__input',
                        'placeholder': " ",
                        'autocorrect': 'off',
                        'minlength': '1',
                        'maxlength': '80',
                        'required': 'required'
                    }
                }) }}
                <label for="city" class="custom-form__item__label">{{ 'city'|trans({}, 'form_customer') }}</label>
            </div>

            <div class="custom-form__error">
                <div class="invalid-feedback">
                    {{ 'City must be at least {{ limit }} characters long.'|trans({'{{ limit }}': 2}, 'validators') }}
                </div>
                <div class="customer-form-error">
                    {{ form_errors(customerForm.city) }}
                </div>
            </div>
        </div>
    </div>
    {% if (lead.getCountryCode() == 'CA' or lead.getCountryCode() == 'MY') %}
        <div class="custom-form__row">
            <div class="custom-form__item full-width">
                <div class="custom-form__item__wrap">
                    {{ form_widget(customerForm.state, { 'attr':
                        {
                            'class': 'custom-form__item__input',
                            'placeholder': " ",
                            'autocorrect': 'off',
                        }
                    }) }}
                    <label for="state" class="custom-form__item__label">{{ 'state'|trans({}, 'form_customer') }}</label>
                </div>

                <div class="custom-form__error">
                    <div class="invalid-feedback">
                        {{ 'Please select a valid state.'|trans({}, 'validators') }}
                    </div>
                    <div class="customer-form-error">
                        {{ form_errors(customerForm.state) }}
                    </div>
                </div>
            </div>
        </div>
    {% endif %}
    <div class="custom-form__row">
        <div class="custom-form__item full-width">
            <div class="custom-form__item__wrap">
                {% set email_field_attributes = {
                    'class': 'custom-form__item__input',
                    'placeholder': " ",
                    'autocorrect': 'off',
                    'required': 'required',
                    'pattern': '.{6,}'
                } %}
                {% if app.request.query.get("lock_email") == 1 %}
                    {% set email_field_attributes = email_field_attributes|merge({ 'readonly': 'readonly' }) %}
                {% endif %}
                {{ form_widget(customerForm.email, { 'attr': email_field_attributes }) }}
                <label for="email" class="custom-form__item__label">{{ 'email'|trans({}, 'form_customer') }}</label>
            </div>

            <div class="custom-form__error">
                <div class="invalid-feedback">
                    {{ 'Please enter a valid email address.'|trans({}, 'validators') }}
                </div>
                <div class="customer-form-error">
                    {{ form_errors(customerForm.email) }}
                </div>
            </div>
        </div>
    </div>
    <div class="custom-form__row">
        <div class="custom-form__item full-width">
            <div class="custom-form__item__wrap">
                {{ form_widget(customerForm.phone, { 'attr':
                    {
                        'class': 'custom-form__item__input',
                        'placeholder': " ",
                        'required': 'required',
                        'autocorrect': 'off',
                        'pattern': '^[+ ]?[0-9]{5,18}$'
                    }
                }) }}
                <label for="phone" class="custom-form__item__label">{{ 'phone'|trans({}, 'form_customer') }}</label>
            </div>

            <div class="custom-form__error">
                <div class="invalid-feedback">
                    {{ 'Please enter a valid phone number without a country prefix.'|trans({}, 'validators') }}
                </div>
                <div class="customer-form-error">
                    {{ form_errors(customerForm.phone) }}
                </div>
            </div>
        </div>
    </div>
    <div class="checkbox form-checkbox">
        <label class="custom-form__row checkbox">
            <input type="checkbox" class="big-checkbox" required="required" name="customer[terms]" id="terms"
                   value="true"
                   data-validator-message="{{ 'you_must_accept_the_terms_and_conditions'|trans({}, 'form_customer') }}">
            <span>
                        {% if campaign.isContest() %}

                            {{ 'i.am.18.years.old.and.accept.the.terms.and.conditions.and.the.promotional.terms'|trans({
                                '{{ start_a_terms }}': '<a class="termslink" data-bs-toggle="modal" data-bs-target="#general_terms_modal">',
                                '{{ end_a }}': '</a>',
                                '{{ start_a_promotion }}': '<a class="termslink" data-bs-toggle="modal" data-bs-target="#promotional_terms_modal">',
                            }, 'form_customer')|raw }}

                        {% else %}
                            {{ pageText.get('I confirm that i am above 18 years of age.') }}
                        {% endif %}

                {% if campaign.getVertical() is empty %}
                    <br>
                    {% if not product.hasTrial() %}
                        {{ 'is.only.valid.for.new.members.of.no.trial'|trans({'%subscription_name%': product.getSubscriptionName(), '%trial_days%': product.getSubscriptionTrialDays(), '%trial_price%': product.getPrice()|priceIntl(product.getCurrency(), lead.getIntlLocale()), '%subscription_price%': product.getSubscriptionPrice()|priceIntl(product.getCurrency(), lead.getIntlLocale()), '%subscription_interval_days%': product.getSubscriptionIntervalDays()}, 'form_customer')|raw }}
                    {% endif %}
                {% endif %}
                </span>
        </label>
    </div>

    {% if not campaign.isContest() %}
        <div class="checkbox form-checkbox">
            <label class="custom-form__row checkbox">
                <input type="checkbox" class="big-checkbox" required="required" name="customer[terms_and_policy]"
                       id="terms_and_policy"
                       value="true"
                       data-validator-message="{{ 'you_must_accept_the_terms_and_conditions'|trans({}, 'form_customer') }}">
                <span>
                {{ pageText.get('I accept the') }}
                    <a class="termslink" data-bs-toggle="modal" data-bs-target="#general_terms_modal">
                        {{ pageText.get('terms and conditions') }}</a>
                    {{ pageText.get('and the') }}
                    <a class="privacy-policy-link" href="{{ service.getPrivacyPolicyUrl()|raw }}" target="_blank">{{ pageText.get('Privacy Policy') }}</a>
                    {{ pageText.get('When you sign up for the service, you receive a %product_subscription_trial_days% days trial, which you pay %product_price%. If you choose not to cancel the trial within the trial period, you will be charged %product_subscription_price% every %product_subscription_interval_days% days, until you cancel your membership.') }}
            </span>
            </label>
        </div>
    {% endif %}

    {% if campaign.getVertical() is empty %}
        <div class="checkbox form-checkbox">
            <label class="custom-form__row checkbox">
                {{ form_widget(customerForm.accepting_newsletter, { 'attr':
                    {
                        'class': 'big-checkbox',
                    } }) }}
                <span>{{ 'Tick.this.box.to.receive.offers.promotions.and.other.commercial.messages.you.can.unsubscribe.at.any.time'|trans({}, 'form_customer') }}</span>
            </label>
        </div>
    {% endif %}

    <button type="submit" name="submit" id="customer_submit_btn" class="custom-form__button">
        {{ 'continue'|trans({}, 'form_customer') }}
    </button>

    {{ form_widget(customerForm._token) }}

    {{ form_end(customerForm, {'render_rest': false}) }}
</form>

<script type="text/javascript">
    function checkInputFilled(inputs) {
        inputs.forEach(input => {
            const inputValue = input.value;
            if (inputValue === "") {
                input.classList.remove('filled');
                input.closest('.custom-form__item').classList.remove('focused');
            } else {
                input.classList.add('filled');
                input.closest('.custom-form__item').classList.add('focused');
            }
        });
    }

    (function () {
        'use strict'

        const forms = document.querySelectorAll('.needs-validation');
        const invalidInputs = Array.from(document.querySelectorAll('input:invalid'));
        const customFormInputs = document.querySelectorAll('.custom-form__item__input');

        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()

                        invalidInputs.forEach(input => {
                            input.classList.add('invalid-input');
                        })
                    }

                    form.classList.add('was-validated')
                }, false)
            })

        customFormInputs.forEach(input => {
            input.addEventListener('focus', () => {
                input.closest('.custom-form__item').classList.add('focused');
            });

            input.addEventListener('blur', () => {
                checkInputFilled([input]);
            });
        });

        // Call the checkInputFilled function when the page loads or when the data is populated
        checkInputFilled(customFormInputs);

    })()
</script>
